{"version":3,"file":"static/js/980.9caeb4a7.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","helpers/findDuplicates.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/FilterField/Filter.styled.js","components/FilterField/Filter.jsx","pages/ContactsPage/ContactsPage.styled.js","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Field as ContactInfo,\n  Form as FormWrapper,\n  ErrorMessage as Error,\n} from 'formik';\n\nexport const Form = styled(FormWrapper)`\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n`;\n\nexport const Field = styled(ContactInfo)`\n    font-size: 25px;\n    padding: 8px;\n    border: 2px solid #4078a5;\n    border-radius: 8px;\n`;\n\nexport const ErrorMessage = styled(Error)`\n    color: red;\n    font-size: 20px;\n`;\n\nexport const Button = styled.button`\n    background-color: #4078a5;\n    color: white;\n    padding: 10px;\n    border-radius: 6px;\n    cursor: pointer;\n    margin-top: 6px;\n    font-size: 22px;\n    border: none;\n\n    &:hover {\n        background-color: black;\n    }\n`;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterQuery) => {\n    const visible = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterQuery.toLowerCase())\n    );\n    return visible;\n  }\n);","// import { Formik } from 'formik';\n// import * as Yup from 'yup';\n// import { Form, Button, Field, ErrorMessage } from './ContactForm.styled';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { selectContacts } from '../../redux/contacts/selectors';\n// import { addContact } from '../../redux/contacts/operations';\n// import { findDuplicates } from '../../helpers/findDuplicates';\n\n// const validationSchema = Yup.object().shape({\n//   name: Yup.string().min(3, 'Too Short!').required('Required'),\n//   number: Yup.string()\n//     .matches(\n//       /^(\\d{2,}-\\d{2,}-\\d{2,}|\\d{2,}-\\d{2,}|\\d{5,})$/,\n//       'Phone number must be min 5 numbers (1234567 or 123-45-67)'\n//     )\n//     .required('Required!'),\n// });\n\n// export const ContactForm = () => {\n//   const contacts = useSelector(selectContacts);\n//   const dispatch = useDispatch();\n\n//   const handleAddContact = values => {\n//     const checkContact = contacts.some(\n//       contact => contact.name.toLowerCase() === values.name.toLowerCase()\n//     );\n\n//     if (checkContact) {\n//       Notiflix.Report.warning('Contact has not been added.', `${values.name} is already in contacts.`);\n//       return;\n//     }\n\n//     dispatch(addContacts(values));\n//   };\n\n//   return (\n//       <Formik\n//         initialValues={{\n//           name: '',\n//           number: '',\n//         }}\n//         onSubmit={(values, actions) => {\n//           handleAddContact(values);\n//           actions.resetForm();\n//         }}\n//         validationSchema={validationSchema}\n//       >\n//         {({ values, handleChange }) => (\n//           <Form>\n//             <Field\n//               id=\"name\"\n//               name=\"name\"\n//               placeholder=\"Name\"\n//               value={values.name}\n//               onChange={handleChange}\n//             />\n//             <ErrorMessage name=\"name\" component=\"span\" />\n\n//             <Field\n//               id=\"number\"\n//               name=\"number\"\n//               placeholder=\"Number\"\n//               value={values.number}\n//               onChange={handleChange}\n//             />\n//             <ErrorMessage name=\"number\" component=\"span\" />\n\n//             <Button type=\"submit\">Add contact</Button>\n//           </Form>\n//         )}\n//       </Formik>\n//   );\n// };\n\n\n\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Button, Field, ErrorMessage } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\nimport { findDuplicates } from '../../helpers/findDuplicates';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().min(3, 'Too Short!').required('Required'),\n  number: Yup.string()\n    .matches(\n      /^(\\d{2,}-\\d{2,}-\\d{2,}|\\d{2,}-\\d{2,}|\\d{5,})$/,\n      'Phone number must be min 5 numbers (1234567 or 123-45-67)'\n    )\n    .required('Required!'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={validationSchema}\n      onSubmit={(values, actions) => {\n        if (!findDuplicates(contacts, values)) {\n          dispatch(addContact(values));\n        } else {\n          alert(`${values.name} is already in contacts.`);\n        }\n        actions.resetForm();\n      }}\n    >\n      {({ values, handleChange, handleSubmit }) => (\n        <Form onSubmit={handleSubmit}>\n          <Field\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            placeholder=\"Name\"\n            value={values.name}\n            onChange={handleChange}\n          />\n          <ErrorMessage name=\"name\" component=\"span\" />\n\n          <Field\n            type=\"text\"\n            id=\"number\"\n            name=\"number\"\n            placeholder=\"Number\"\n            value={values.number}\n            onChange={handleChange}\n          />\n          <ErrorMessage name=\"number\" component=\"span\" />\n\n          <Button type=\"submit\">Add contact</Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\n","import toast from 'react-hot-toast';\n\nexport const findDuplicates = (contacts, newContact) => {\n  const isDuplicateName = contacts.some(\n    contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n  );\n\n  const isDuplicateNumber = contacts.some(\n    contact => contact.number === newContact.number\n  );\n\n  if (isDuplicateName) {\n    toast.error(`'${newContact.name}' is already in contacts.`);\n    return newContact;\n  }\n\n  if (isDuplicateNumber) {\n    toast.error(\n      `Number '${newContact.number}' is already saved under the name '${newContact.name}'`\n    );\n    return newContact;\n  }\n};","import styled from 'styled-components';\n\nexport const Span = styled.p`\n  font-size: 24px;\n`;\n\nexport const Item = styled.li`\n    display: flex;\n    gap: 18px;\n    margin-bottom: 18px;\n    font-size: 20px;\n    font-weight: 700;\n    align-items: center;\n`;\n\nexport const Btn = styled.button`\n    font-size: 18px;\n    border-radius: 4px;\n    border: 1px solid #8fbcbc;\n    background-color: #8fbcbc; \n    transition: background-color 0.3s ease, color 0.5s ease;\n    &:hover,\n    &:focus {\n    color: white;\n    background-color: red;\n    }\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { Item, Span, Btn } from './ContactsList.styled';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <div>\n      <ul>\n        {contacts.map(contact => {\n          const { id, name, number } = contact;\n\n          return (\n            <Item key={id}>\n              <Span>{name}:</Span>\n              <Span>{number}</Span>\n              <Btn onClick={() => dispatch(deleteContact(id))}>\n                Delete\n              </Btn>\n            </Item>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};","import styled from 'styled-components';\n\nexport const FilterWrapper = styled.div`\n    width: 250px;\n    font-size: 22px;\n    margin-bottom: 24px;\n`;\n\nexport const Input = styled.input`\n    font-size: 20px;\n    padding: 10px;\n    border: 1px solid #2F4F4F;\n    border-radius: 8px;\n    height: 34px;\n    width: 470px;\n    margin-top: 6px;\n    background-color: #f7fafa;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FilterWrapper, Input } from './Filter.styled';\nimport { changeFilter } from '../../redux/filter/filterSlice';\n\nexport const FilterField = () => {\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n  return (\n    <FilterWrapper>\n      Filter contacts by name:\n      <Input\n        name=\"filter\"\n        type=\"text\"\n        placeholder=\"Search\"\n        value={filter}\n        onChange={event => dispatch(changeFilter(event.target.value))}\n      />\n    </FilterWrapper>\n  );\n};","import styled from \"styled-components\";\n\nexport const PhoneFormWrapper = styled.div`\n  margin-top: 70px;\n  display: flex;\n  justify-content: space-evenly;\n`;\n\nexport const FilterListWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n","import { ContactForm } from \"../../components/ContactForm/ContactForm\";\nimport { ContactsList } from \"../../components/ContactsList/ContactsList\";\nimport { FilterField } from \"../../components/FilterField/Filter\";\nimport { PhoneFormWrapper, FilterListWrapper } from \"./ContactsPage.styled\";\n\nexport default function ContactPage() {\n  return (\n    <PhoneFormWrapper>\n      <ContactForm />\n      <FilterListWrapper>\n        <FilterField />\n        <ContactsList />\n      </FilterListWrapper>\n    </PhoneFormWrapper>\n  );\n}"],"names":["Form","styled","FormWrapper","_templateObject","_taggedTemplateLiteral","Field","ContactInfo","_templateObject2","ErrorMessage","Error","_templateObject3","Button","_templateObject4","selectContacts","state","contacts","items","selectVisibleContacts","createSelector","filter","filterQuery","contact","name","toLowerCase","includes","validationSchema","Yup","shape","min","required","number","matches","ContactForm","useSelector","dispatch","useDispatch","_jsx","Formik","initialValues","onSubmit","values","actions","newContact","isDuplicateName","some","isDuplicateNumber","toast","concat","findDuplicates","addContact","alert","resetForm","children","_ref","handleChange","handleSubmit","_jsxs","type","id","placeholder","value","onChange","component","Span","Item","Btn","ContactsList","map","onClick","deleteContact","FilterWrapper","Input","FilterField","event","changeFilter","target","PhoneFormWrapper","FilterListWrapper","ContactPage"],"sourceRoot":""}